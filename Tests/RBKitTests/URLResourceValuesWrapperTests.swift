import Carbon
import CustomDump
import Testing

@testable import RBKit

struct URLResourceValuesWrapperTests {
  @Test func test_init() {
    let a = URLResourceValuesWrapper(.init())

    #expect(a.allValues.isEmpty)
    #expect(a.name == nil)
    #expect(a.localizedName == nil)
    #expect(a.isRegularFile == nil)
    #expect(a.isDirectory == nil)
    #expect(a.isSymbolicLink == nil)
    #expect(a.isVolume == nil)
    #expect(a.isPackage == nil)
    #expect(a.isApplication == nil)
    #expect(a.applicationIsScriptable == nil)
    #expect(a.isSystemImmutable == nil)
    #expect(a.isUserImmutable == nil)
    #expect(a.isHidden == nil)
    #expect(a.hasHiddenExtension == nil)
    #expect(a.creationDate == nil)
    #expect(a.contentAccessDate == nil)
    #expect(a.contentModificationDate == nil)
    #expect(a.attributeModificationDate == nil)
    #expect(a.linkCount == nil)
    #expect(a.parentDirectory == nil)
    #expect(a.volume == nil)
    #expect(a.typeIdentifier == nil)
    #expect(a.localizedTypeDescription == nil)
    #expect(a.labelNumber == nil)
    #expect(a.localizedLabel == nil)
    // XCTAssertNil(a.fileResourceIdentifier)
    // XCTAssertNil(a.volumeIdentifier)
    #expect(a.fileIdentifier == nil)
    #expect(a.fileContentIdentifier == nil)
    #expect(a.preferredIOBlockSize == nil)
    #expect(a.isReadable == nil)
    #expect(a.isWritable == nil)
    #expect(a.isExecutable == nil)
    #expect(a.fileSecurity == nil)
    #expect(a.isExcludedFromBackup == nil)
    #expect(a.tagNames == nil)
    #expect(a.path == nil)
    #expect(a.canonicalPath == nil)
    #expect(a.isMountTrigger == nil)
    // XCTAssertNil(a.generationIdentifier)
    #expect(a.documentIdentifier == nil)
    #expect(a.addedToDirectoryDate == nil)
    #expect(a.quarantineProperties == nil)
    #expect(a.mayHaveExtendedAttributes == nil)
    #expect(a.isPurgeable == nil)
    #expect(a.isSparse == nil)
    #expect(a.mayShareFileContent == nil)
    #expect(a.fileResourceType == nil)
    #expect(a.directoryEntryCount == nil)
    #expect(a.volumeLocalizedFormatDescription == nil)
    #expect(a.volumeTotalCapacity == nil)
    #expect(a.volumeAvailableCapacity == nil)
    #expect(a.volumeAvailableCapacityForImportantUsage == nil)
    #expect(a.volumeAvailableCapacityForOpportunisticUsage == nil)
    #expect(a.volumeResourceCount == nil)
    #expect(a.volumeSupportsPersistentIDs == nil)
    #expect(a.volumeSupportsSymbolicLinks == nil)
    #expect(a.volumeSupportsHardLinks == nil)
    #expect(a.volumeSupportsJournaling == nil)
    #expect(a.volumeIsJournaling == nil)
    #expect(a.volumeSupportsSparseFiles == nil)
    #expect(a.volumeSupportsZeroRuns == nil)
    #expect(a.volumeSupportsCaseSensitiveNames == nil)
    #expect(a.volumeSupportsCasePreservedNames == nil)
    #expect(a.volumeSupportsRootDirectoryDates == nil)
    #expect(a.volumeSupportsVolumeSizes == nil)
    #expect(a.volumeSupportsRenaming == nil)
    #expect(a.volumeSupportsAdvisoryFileLocking == nil)
    #expect(a.volumeSupportsExtendedSecurity == nil)
    #expect(a.volumeIsBrowsable == nil)
    #expect(a.volumeMaximumFileSize == nil)
    #expect(a.volumeIsEjectable == nil)
    #expect(a.volumeIsRemovable == nil)
    #expect(a.volumeIsInternal == nil)
    #expect(a.volumeIsAutomounted == nil)
    #expect(a.volumeIsLocal == nil)
    #expect(a.volumeIsReadOnly == nil)
    #expect(a.volumeCreationDate == nil)
    #expect(a.volumeURLForRemounting == nil)
    #expect(a.volumeUUIDString == nil)
    #expect(a.volumeName == nil)
    #expect(a.volumeLocalizedName == nil)
    #expect(a.volumeIsEncrypted == nil)
    #expect(a.volumeIsRootFileSystem == nil)
    #expect(a.volumeSupportsCompression == nil)
    #expect(a.volumeSupportsFileCloning == nil)
    #expect(a.volumeSupportsSwapRenaming == nil)
    #expect(a.volumeSupportsExclusiveRenaming == nil)
    #expect(a.volumeSupportsImmutableFiles == nil)
    #expect(a.volumeSupportsAccessPermissions == nil)
    #expect(a.volumeTypeName == nil)
    #expect(a.volumeSubtype == nil)
    #expect(a.volumeMountFromLocation == nil)
    #expect(a.isUbiquitousItem == nil)
    #expect(a.ubiquitousItemHasUnresolvedConflicts == nil)
    #expect(a.ubiquitousItemIsDownloading == nil)
    #expect(a.ubiquitousItemIsUploaded == nil)
    #expect(a.ubiquitousItemIsUploading == nil)
    #expect(a.ubiquitousItemDownloadingStatus == nil)
    #expect(a.ubiquitousItemDownloadingError == nil)
    #expect(a.ubiquitousItemUploadingError == nil)
    #expect(a.ubiquitousItemDownloadRequested == nil)
    #expect(a.ubiquitousItemContainerDisplayName == nil)
    #expect(a.ubiquitousItemIsExcludedFromSync == nil)
    #expect(a.ubiquitousItemIsShared == nil)
    #expect(a.ubiquitousSharedItemCurrentUserRole == nil)
    #expect(a.ubiquitousSharedItemCurrentUserPermissions == nil)
    #expect(a.ubiquitousSharedItemOwnerNameComponents == nil)
    #expect(a.ubiquitousSharedItemMostRecentEditorNameComponents == nil)
    #expect(a.fileProtection == nil)
    #expect(a.fileSize == nil)
    #expect(a.fileAllocatedSize == nil)
    #expect(a.totalFileSize == nil)
    #expect(a.totalFileAllocatedSize == nil)
    #expect(a.isAliasFile == nil)
  }
}
